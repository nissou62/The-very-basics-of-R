library(shiny)
library(ggplot2)
library(DT)
library(readxl)
library(rsconnect)


# Load your dataset
if (!file.exists("Data_Counting_Cars.xlsx")) {
  stop("Data file not found. Make sure 'Data_Counting_Cars.xlsx' is in the same directory as this app.")
}
dataset <- read_excel("Data_Counting_Cars.xlsx")

# Fix column names for easier referencing
colnames(dataset) <- make.names(colnames(dataset))  # e.g. changes "Speed (mph)" to "Speed.mph."
column_names <- colnames(dataset)

# Normalize 'Color' column to lowercase if it exists
if ("Color" %in% column_names) {
  dataset$Color <- tolower(trimws(dataset$Color))
}

# Define color mapping with hex code for silver
car_colors <- c(
  black = "black",
  blue = "blue",
  brown = "brown",
  gray = "gray",
  red = "red",
  silver = "#C0C0C0",  # Hex code for silver
  white = "white",
  yellow = "yellow"
)

ui <- fluidPage(
  titlePanel(title = "Explore Car Counting Dataset"),
  h4('Your Groupâ€™s Car Observation Project'),
  
  fluidRow(
    column(2,
           selectInput('X', 'Choose X', column_names, column_names[1]),
           selectInput('Y', 'Choose Y', column_names, column_names[3]),
           selectInput('Splitby', 'Split By (Color maybe?)', column_names, "Color")
    ),
    column(4, plotOutput('plot_01')),
    column(6, DT::dataTableOutput("table_01", width = "100%"))
  ),
  
  fluidRow(
    column(12,
           h4("Summary (Min / Max of Y Variable):"),
           verbatimTextOutput("summary_output")
    )
  )
)

server <- function(input, output) {
  output$plot_01 <- renderPlot({
    data_for_plot <- dataset
    data_for_plot[[input$X]] <- as.factor(data_for_plot[[input$X]])
    
    # Normalize color if it's the Splitby
    if (input$Splitby == "Color") {
      data_for_plot$Color <- tolower(trimws(data_for_plot$Color))
    }
    
    p <- ggplot(data_for_plot, aes_string(x = input$X, y = input$Y, fill = input$Splitby)) +
      geom_col(position = "dodge") +
      theme_minimal() +
      labs(title = paste("Exploring", input$Y, "vs", input$X, "by", input$Splitby),
           x = input$X, y = input$Y)
    
    if (input$Splitby == "Color") {
      p <- p + scale_fill_manual(values = car_colors)
    }
    
    p
  })
  
  output$table_01 <- DT::renderDataTable({
    dataset[, c(input$X, input$Y, input$Splitby)]
  }, options = list(pageLength = 5))
  
  output$summary_output <- renderPrint({
    y_col <- dataset[[input$Y]]
    
    if (is.numeric(y_col)) {
      cat("Y Variable (", input$Y, ") - Numeric\n", sep = "")
      cat("Min:", min(y_col, na.rm = TRUE), "\n")
      cat("Max:", max(y_col, na.rm = TRUE), "\n")
    } else if (is.character(y_col) || is.factor(y_col)) {
      cat("Y Variable (", input$Y, ") - Categorical\n", sep = "")
      cat("Min (Alphabetical):", min(as.character(y_col), na.rm = TRUE), "\n")
      cat("Max (Alphabetical):", max(as.character(y_col), na.rm = TRUE), "\n")
    } else {
      cat("Y Variable is not supported for summary.\n")
    }
  })
}

shinyApp(ui = ui, server = server)
