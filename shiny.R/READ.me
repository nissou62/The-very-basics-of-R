# Load required libraries
library(shiny)
# Define UI
ui <- fluidPage(
  titlePanel("Basic Histogram in Shiny"),
  sidebarLayout(
    sidebarPanel(),
    mainPanel(
      plotOutput("histPlot") # Placeholder for histogram
    )
  )
)
# Define server logic
server <- function(input, output) {
  output$histPlot <- renderPlot({
    hist(mtcars$mpg, col = "blue", main = "Histogram of MPG", xlab =
           "MPG")
  })
}
# Run the app
shinyApp(ui = ui, server = server)

r
CopyEdit
# Load required libraries
library(shiny)
library(ggplot2)
# Define UI
ui <- fluidPage(
  titlePanel("Histogram with ggplot2"),
  sidebarLayout(
    sidebarPanel(),
    mainPanel(
      plotOutput("histPlot") # ggplot histogram
    )
  )
)
# Define server logic
server <- function(input, output) {
  output$histPlot <- renderPlot({
    ggplot(mtcars, aes(x = mpg)) +
      geom_histogram(fill = "blue", color = "black", bins = 10) +
      labs(title = "Histogram of MPG", x = "MPG", y = "Count")
  })
}
# Run the app
shinyApp(ui = ui, server = server)


# Load required libraries
library(shiny)
library(ggplot2)
# Define UI
ui <- fluidPage(
  titlePanel("Interactive Histogram with ggplot2"),
  sidebarLayout(
    sidebarPanel(
      selectInput("var", "Choose a Variable:",
                  choices = c("MPG" = "mpg", "Horsepower" = "hp",
                              "Weight" = "wt"),
                  selected = "mpg") # Default selection
    ),
    mainPanel(
      plotOutput("histPlot") # Interactive plot
    )
  )
)
# Define server logic
server <- function(input, output) {
  output$histPlot <- renderPlot({
    ggplot(mtcars, aes_string(x = input$var)) + # Uses user-selected
      variable
    geom_histogram(fill = "blue", color = "black", bins = 10) +
      labs(title = paste("Histogram of", input$var), x = input$var, y =
             "Count")
  })
}
# Run the app
shinyApp(ui = ui, server = server)



library(shiny)
ui <- fluidPage(
  "Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)

ui <- fluidPage(
  selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
  verbatimTextOutput("summary"),
  tableOutput("table")
)

server <- function(input, output, session) {
  output$summary <- renderPrint({
    dataset <- get(input$dataset, "package:datasets")
    summary(dataset)
  })
  
  output$table <- renderTable({
    dataset <- get(input$dataset, "package:datasets")
    dataset
  })
}
dataset <- get(input$dataset, "package:datasets")
server <- function(input, output, session) {
  # Create a reactive expression
  dataset <- reactive({
    get(input$dataset, "package:datasets")
  })
  
  output$summary <- renderPrint({
    # Use a reactive expression by calling it like a function
    summary(dataset())
  })
  
  output$table <- renderTable({
    dataset()
  })
}
#1
library(shiny)

ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("greeting")
)

server <- function(input, output, session) {
  output$greeting <- renderText({
    paste0("Hello ", input$name)
  })
}

shinyApp(ui, server)
#2
library(shiny)

ui <- fluidPage(
  sliderInput("x", label = "If x is", min = 1, max = 50, value = 30),
  "then x times 5 is",
  textOutput("product")
)

server <- function(input, output, session) {
  output$product <- renderText({ 
    input$x * 5  # Corrected: Use input$x instead of x
  })
}

shinyApp(ui, server)
#3
library(shiny)

ui <- fluidPage(
  sliderInput("x", label = "If x is", min = 1, max = 50, value = 30),
  sliderInput("y", label = "and y is", min = 1, max = 10, value = 5),
  "then x times y is",
  textOutput("product")
)

server <- function(input, output, session) {
  output$product <- renderText({ 
    input$x * input$y  # Multiply x by y
  })
}

shinyApp(ui, server)

#4#Whatâ€™s New?
#This version of the app introduces two additional calculations:
#(x * y) + 5
#(x * y) + 10


#reducing duplicated code
library(shiny)

ui <- fluidPage(
  sliderInput("x", "If x is", min = 1, max = 50, value = 30),
  sliderInput("y", "and y is", min = 1, max = 50, value = 5),
  "then, (x * y) is", textOutput("product"),
  "and, (x * y) + 5 is", textOutput("product_plus5"),
  "and (x * y) + 10 is", textOutput("product_plus10")
)

server <- function(input, output, session) {
  product <- reactive({ input$x * input$y })  # Compute once
  
  output$product <- renderText({ product() })
  output$product_plus5 <- renderText({ product() + 5 })
  output$product_plus10 <- renderText({ product() + 10 })
}

shinyApp(ui, server)


#5#Bug #1: tableOutput("plot") should be plotOutput("plot")
#Bug #2: plot(dataset) should be plot(dataset())
#Bug #3: get(input$dataset, "package:ggplot2") should use pos = instead of "package:ggplot2"

library(shiny)
library(ggplot2)

datasets <- c("economics", "faithfuld", "seals")

ui <- fluidPage(
  selectInput("dataset", "Dataset", choices = datasets),
  verbatimTextOutput("summary"),
  plotOutput("plot")  # Fixed: Changed from tableOutput to plotOutput
)

server <- function(input, output, session) {
  dataset <- reactive({
    get(input$dataset, pos = "package:ggplot2")  # Fixed: Corrected the 'get' function
  })
  
  output$summary <- renderPrint({
    summary(dataset())
  })
  
  output$plot <- renderPlot({
    plot(dataset())  # Fixed: Call dataset() instead of dataset
  }, res = 96)
}

shinyApp(ui, server)

